networks:
  default:
    name: drone_internal

  traefik_bridge:
    external: true

services:
  drone:
    container_name: drone
    image: drone/drone:2
    depends_on:
      - postgres
    environment:
      DRONE_GITEA_CLIENT_ID: ${DRONE_GITEA_CLIENT_ID}
      DRONE_GITEA_CLIENT_SECRET: ${DRONE_GITEA_CLIENT_SECRET}
      DRONE_GITEA_SERVER: https://git.starsystem.dev
      DRONE_GIT_ALWAYS_AUTH: true
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_SERVER_HOST: ci.starsystem.dev
      DRONE_SERVER_PROTO: https
      DRONE_DATABASE_DRIVER: postgres
      DRONE_DATABASE_DATASOURCE: postgres://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE}?sslmode=disable
      DRONE_DATABASE_SECRET: ${DRONE_DATABASE_SECRET}
    networks:
      - default
      - traefik_bridge
    volumes:
      - /mnt/storage-pool/apps/drone:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.drone.rule=Host(`ci.starsystem.dev`)
      - traefik.http.services.drone.loadbalancer.server.port=80
    restart: always

  postgres:
    container_name: drone-postgres
    image: postgres:17
    env_file:
      - stack.env
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}" ]
      interval: 5s
      retries: 5
      timeout: 5s
    volumes:
      - /mnt/storage-pool/databases/postgresql/drone:/var/lib/postgresql/data
    labels:
      - traefik.enable=false
    restart: always